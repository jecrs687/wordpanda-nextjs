generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Translation {
    id           Int      @id @default(autoincrement())
    word         Word     @relation(fields: [wordId], references: [id])
    wordId       Int      @map(name: "word_id")
    translations Word[]   @relation("translations")
    languageId   Int      @map(name: "language_id")
    Language     Language @relation(fields: [languageId], references: [id])

    createdAt DateTime  @default(now()) @map(name: "created_at")
    updatedAt DateTime  @updatedAt @map(name: "updated_at")
    deletedAt DateTime? @map(name: "deleted_at")
}

model User {
    id        Int     @id @default(autoincrement())
    firstName String? @map(name: "first_name") @db.VarChar(90)
    lastName  String? @map(name: "last_name") @db.VarChar(90)
    username  String?
    phone     String?
    email     String? @unique @db.VarChar(90)
    password  String? @db.VarChar(120)

    role Role @default(USER)

    score       Int         @default(0)
    lastLoginAt DateTime?   @default(now()) @map(name: "last_login_at")
    createdAt   DateTime?   @default(now()) @map(name: "created_at")
    updatedAt   DateTime?   @updatedAt @map(name: "updated_at")
    deletedAt   DateTime?   @map(name: "deleted_at")
    UserWords   UserWords[]
    MediaUser   MediaUser[]
}

model UserWords {
    id         Int       @id @default(autoincrement())
    userId     Int       @map(name: "user_id")
    languageId Int       @map(name: "language_id")
    createdAt  DateTime? @default(now()) @map(name: "created_at")
    updatedAt  DateTime? @updatedAt @map(name: "updated_at")
    deletedAt  DateTime? @map(name: "deleted_at")
    User       User      @relation(fields: [userId], references: [id])
    Words      Word[]
    Language   Language  @relation(fields: [languageId], references: [id])

    attemps Int @default(0)
    errors  Int @default(0)
    streak  Int @default(0)

    lastAttemp  DateTime? @map(name: "last_attemp")
    lastError   DateTime? @map(name: "last_error")
    lastSuccess DateTime? @map(name: "last_success")

    //recomend another informations to this table

    notLearned Boolean?  @default(true) @map(name: "not_learned")
    progress   Int?      @default(0)
    quality    Int?      @default(0)
    interval   Int?      @default(0)
    nextAttemp DateTime? @map(name: "next_attemp")

    @@unique([userId, languageId])
    @@map("user_word")
}

model Word {
    id         Int      @id @default(autoincrement())
    word       String
    languageId Int
    language   Language @relation(fields: [languageId], references: [id])

    translations Translation[]

    translationsTo Translation[] @relation("translations")

    mediaWords MediaWords[]
    createdAt  DateTime?    @default(now()) @map(name: "created_at")
    updatedAt  DateTime?    @updatedAt @map(name: "updated_at")
    deletedAt  DateTime?    @map(name: "deleted_at")

    UserWords UserWords[]

    difficulty Int? @default(0)
    attemps    Int? @default(0)
    errors     Int? @default(0)

    @@unique([word, languageId])
}

model Platform {
    id      Int     @id @default(autoincrement())
    name    String
    url     String
    logoUrl String? @map(name: "logo_url")
    medias  Media[]

    createdAt DateTime  @default(now()) @map(name: "created_at")
    updatedAt DateTime  @updatedAt @map(name: "updated_at")
    deletedAt DateTime? @map(name: "deleted_at")
}

model Media {
    id         Int       @id @default(autoincrement())
    name       String
    url        String
    type       MediaType @default(VIDEO)
    platformId Int       @map(name: "platform_id")
    Platform   Platform  @relation(fields: [platformId], references: [id])
    logoUrl    String?   @map(name: "logo_url")

    mediaWords MediaWords[]

    createdAt  DateTime    @default(now()) @map(name: "created_at")
    updatedAt  DateTime    @updatedAt @map(name: "updated_at")
    deletedAt  DateTime?   @map(name: "deleted_at")
    Language   Language?   @relation(fields: [languageId], references: [id])
    languageId Int?
    MediaUser  MediaUser[]
}

model MediaWords {
    id Int @id @default(autoincrement())

    mediaId    Int      @map(name: "media_id")
    Media      Media    @relation(fields: [mediaId], references: [id])
    Words      Word[]
    Language   Language @relation(fields: [languageId], references: [id])
    languageId Int      @map(name: "language_id")

    createdAt DateTime  @default(now()) @map(name: "created_at")
    updatedAt DateTime  @updatedAt @map(name: "updated_at")
    deletedAt DateTime? @map(name: "deleted_at")
}

model MediaUser {
    id Int @id @default(autoincrement())

    mediaId      Int       @map(name: "media_id")
    Media        Media     @relation(fields: [mediaId], references: [id])
    userId       Int       @map(name: "user_id")
    User         User      @relation(fields: [userId], references: [id])
    progress     Int?      @default(0)
    wordsLearned Int?      @default(0)
    Language     Language? @relation(fields: [languageId], references: [id])
    languageId   Int?      @map(name: "language_id")

    createdAt DateTime  @default(now()) @map(name: "created_at")
    updatedAt DateTime  @updatedAt @map(name: "updated_at")
    deletedAt DateTime? @map(name: "deleted_at")
}

model Language {
    id       Int    @id @default(autoincrement())
    code     String
    language String

    createdAt   DateTime      @default(now()) @map(name: "created_at")
    updatedAt   DateTime      @updatedAt @map(name: "updated_at")
    deletedAt   DateTime?     @map(name: "deleted_at")
    Translation Translation[]
    Word        Word[]
    Media       Media[]
    MediaWords  MediaWords[]
    UserWords   UserWords[]
    MediaUser   MediaUser[]
}

enum Role {
    USER
    BKO
    ADMIN
}

enum MediaType {
    MOVIE
    VIDEO
    AUDIO
}
