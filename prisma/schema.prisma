generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URI")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Translation {
  id                String   @id @default(cuid())
  word              Word     @relation(fields: [wordId], references: [id])
  wordId            String   @map(name: "word_id")
  translations      Word[]   @relation("translationsTo")
  languageId        Int      @map(name: "language_id")
  language          Language @relation(fields: [languageId], references: [id])
  meaning           String?  @db.VarChar(512)
  meaningTranslated String?  @map(name: "meaning_translated") @db.VarChar(512)

  reports   Int?      @default(0)
  createdAt DateTime  @default(now()) @map(name: "created_at")
  updatedAt DateTime  @updatedAt @map(name: "updated_at")
  deletedAt DateTime? @map(name: "deleted_at")

  @@unique([wordId, languageId])
}

model ProbableUser {
  id        String    @id @default(cuid())
  email     String    @unique
  createdAt DateTime  @default(now()) @map(name: "created_at")
  updatedAt DateTime  @updatedAt @map(name: "updated_at")
  deletedAt DateTime? @map(name: "deleted_at")
}

model MissingMedia {
  id        String    @id @default(cuid())
  userId    String    @map(name: "user_id")
  user      User      @relation(fields: [userId], references: [id])
  name      String
  provider  String
  createdAt DateTime  @default(now()) @map(name: "created_at")
  updatedAt DateTime  @updatedAt @map(name: "updated_at")
  deletedAt DateTime? @map(name: "deleted_at")
}

model Subscription {
  id String @id @default(cuid())

  userId String @unique @map(name: "user_id")
  user   User   @relation(fields: [userId], references: [id])

  type     String
  status   String
  period   DateTime
  duration Int      @default(1)

  createdAt DateTime  @default(now()) @map(name: "created_at")
  updatedAt DateTime  @updatedAt @map(name: "updated_at")
  deletedAt DateTime? @map(name: "deleted_at")
}

model User {
  id        String  @id @default(cuid())
  firstName String? @map(name: "first_name") @db.VarChar(90)
  lastName  String? @map(name: "last_name") @db.VarChar(90)
  username  String?
  phone     String?
  email     String? @unique @db.VarChar(90)
  password  String? @db.VarChar(120)

  role Role @default(USER)

  languageId  Int       @default(1) @map(name: "language_id")
  language    Language? @relation(fields: [languageId], references: [id])
  score       Int       @default(0)
  lastLoginAt DateTime? @default(now()) @map(name: "last_login_at")

  // New fields for enhanced learning profile
  dailyGoal             Int?    @default(30) @map(name: "daily_goal") // Words or minutes per day
  preferredLearningTime String? @map(name: "preferred_learning_time") // Morning, Afternoon, Evening, Night
  learningStyle         String? @map(name: "learning_style") // Visual, Auditory, Reading/Writing, Kinesthetic
  difficultyPreference  Int?    @default(1) @map(name: "difficulty_preference") // 1-5 scale

  // Gamification data
  streak        Int? @default(0) // Current day streak
  longestStreak Int? @default(0) @map(name: "longest_streak")
  totalPoints   Int? @default(0) @map(name: "total_points")
  level         Int? @default(1)

  createdAt DateTime? @default(now()) @map(name: "created_at")
  updatedAt DateTime? @updatedAt @map(name: "updated_at")
  deletedAt DateTime? @map(name: "deleted_at")
  activedAt DateTime? @map(name: "actived_at")

  userLanguages UserLanguage[]
  mediaUser     MediaUser[]
  UserWords     UserWords[]
  MissingMedia  MissingMedia[]
  Subscription  Subscription?

  // New relations
  learningSession LearningSession[]
  achievements    UserAchievement[]
  friends         Friendship[]      @relation("UserFriends")
  friendsOf       Friendship[]      @relation("FriendOf")
  notes           UserNote[]

  OTP OTP[]

  // Marketing relations
  userAcquisition UserAcquisition[]
  referrals       Referral[]        @relation("UserReferrals")
  referredBy      Referral[]        @relation("UserReferees")
  userFeedback    UserFeedback[]
}

model UserLanguage {
  id         String      @id @default(cuid())
  userId     String      @map(name: "user_id")
  languageId Int         @map(name: "language_id")
  createdAt  DateTime?   @default(now()) @map(name: "created_at")
  updatedAt  DateTime?   @updatedAt @map(name: "updated_at")
  deletedAt  DateTime?   @map(name: "deleted_at")
  user       User        @relation(fields: [userId], references: [id])
  language   Language    @relation(fields: [languageId], references: [id])
  userWords  UserWords[]

  @@unique([userId, languageId])
  @@map("user_language")
}

model UserWords {
  id     String @id @default(cuid())
  userId String @map(name: "user_id")
  user   User   @relation(fields: [userId], references: [id])

  wordId String @map(name: "word_id")
  word   Word   @relation(fields: [wordId], references: [id])

  userLanguageId String       @map(name: "user_language_id")
  userLanguage   UserLanguage @relation(fields: [userLanguageId], references: [id])

  attempts Int @default(0)
  errors   Int @default(0)
  streak   Int @default(0)

  lastAttempt DateTime? @map(name: "last_attempt")
  lastError   DateTime? @map(name: "last_error")
  lastSuccess DateTime? @map(name: "last_success")

  // Enhanced SRS fields
  notLearned  Boolean?  @default(true) @map(name: "not_learned")
  progress    Int?      @default(0) // 0-100 percentage
  easeFactor  Float?    @default(2.5) @map(name: "ease_factor") // SM-2 algorithm ease factor
  interval    Int?      @default(0) // Days between reviews
  nextAttempt DateTime? @map(name: "next_attempt")

  // Additional learning data
  confidenceLevel Int?      @default(0) @map(name: "confidence_level") // 0-5 scale
  lastRecallSpeed Int?      @map(name: "last_recall_speed") // Milliseconds to recall
  lastErrorType   String?   @map(name: "last_error_type") // Spelling, Meaning, Context, etc.
  mastered        Boolean?  @default(false)
  masteredAt      DateTime? @map(name: "mastered_at")

  // User context data
  context       String? @db.VarChar(512) // Custom context or sentence added by user
  personalNotes String? @map(name: "personal_notes") @db.VarChar(512)

  createdAt DateTime? @default(now()) @map(name: "created_at")
  updatedAt DateTime? @updatedAt @map(name: "updated_at")
  deletedAt DateTime? @map(name: "deleted_at")

  @@unique([userId, userLanguageId, wordId])
  @@map("user_word")
}

model Word {
  id   String @id @default(cuid())
  word String

  languageId Int      @map(name: "language_id")
  language   Language @relation(fields: [languageId], references: [id])

  translations           Translation[]
  translationsTo         Translation[] @relation("translationsTo")
  isNotPossibleTranslate Boolean?      @default(false) @map(name: "is_not_possible_translate")
  mediaWords             MediaWords[]

  createdAt DateTime? @default(now()) @map(name: "created_at")
  updatedAt DateTime? @updatedAt @map(name: "updated_at")
  deletedAt DateTime? @map(name: "deleted_at")

  userWords UserWords[]

  reports      Int?           @default(0)
  attempts     Int?           @default(0)
  errors       Int?           @default(0)
  frequency    Int?           @default(0)
  wordGameQuiz WordGameQuiz[]

  // Enhanced metrics
  difficulty        Int?        @default(0) // Algorithm-calculated difficulty (1-10)
  averageRecallTime Int?        @default(0) @map(name: "avg_recall_time") // Average milliseconds to recall
  contextExamples   String[]    @map(name: "context_examples") // Example sentences
  BookWord          BookWord[]
  Games             Games[]
  GameRound         GameRound[]

  @@unique([word, languageId])
  @@unique([id, languageId])
}

model Platform {
  id      String  @id @default(cuid())
  name    String
  url     String
  logoUrl String  @default("https://picsum.photos/500/1000") @map(name: "logo_url")
  medias  Media[]

  createdAt DateTime  @default(now()) @map(name: "created_at")
  updatedAt DateTime  @updatedAt @map(name: "updated_at")
  deletedAt DateTime? @map(name: "deleted_at")
}

model Serie {
  id          String       @id @default(cuid())
  name        String
  description String?
  serieMedia  SerieMedia[]

  createdAt DateTime  @default(now()) @map(name: "created_at")
  updatedAt DateTime  @updatedAt @map(name: "updated_at")
  deletedAt DateTime? @map(name: "deleted_at")
}

model SerieMedia {
  id      String @id @default(cuid())
  serieId String @map(name: "serie_id")
  mediaId String @map(name: "media_id")
  serie   Serie  @relation(fields: [serieId], references: [id])
  media   Media  @relation(fields: [mediaId], references: [id])
  episode Int    @default(1)
  season  Int    @default(1)

  createdAt DateTime  @default(now()) @map(name: "created_at")
  updatedAt DateTime  @updatedAt @map(name: "updated_at")
  deletedAt DateTime? @map(name: "deleted_at")
}

model Subtitle {
  id         String    @id @default(cuid())
  mediaId    String    @map(name: "media_id")
  media      Media     @relation(fields: [mediaId], references: [id])
  languageId Int       @map(name: "language_id")
  language   Language  @relation(fields: [languageId], references: [id])
  url        String
  downloaded Boolean   @default(false)
  createdAt  DateTime  @default(now()) @map(name: "created_at")
  updatedAt  DateTime  @updatedAt @map(name: "updated_at")
  deletedAt  DateTime? @map(name: "deleted_at")
}

model Images {
  id      String @id @default(cuid())
  url     String
  type    String
  mediaId String @map(name: "media_id")
  media   Media  @relation(fields: [mediaId], references: [id])

  createdAt DateTime  @default(now()) @map(name: "created_at")
  updatedAt DateTime  @updatedAt @map(name: "updated_at")
  deletedAt DateTime? @map(name: "deleted_at")
}

model Media {
  id String @id @default(cuid())

  name           String
  description    String?          @db.VarChar(1024)
  url            String
  type           MediaType        @default(VIDEO)
  platformId     String           @map(name: "platform_id")
  platform       Platform         @relation(fields: [platformId], references: [id])
  logoUrl        String           @default("https://picsum.photos/500/1000") @map(name: "logo_url")
  serieMedias    SerieMedia[]
  subtitles      Subtitle[]
  images         Images[]
  mediaLanguages MediaLanguages[]

  createdAt DateTime  @default(now()) @map(name: "created_at")
  updatedAt DateTime  @updatedAt @map(name: "updated_at")
  deletedAt DateTime? @map(name: "deleted_at")
}

model MediaLanguages {
  id String @id @default(cuid())

  title       String?
  description String? @db.VarChar(1024)

  mediaId    String       @map(name: "media_id")
  media      Media        @relation(fields: [mediaId], references: [id])
  language   Language     @relation(fields: [languageId], references: [id])
  languageId Int          @map(name: "language_id")
  mediaWords MediaWords[]
  mediaUsers MediaUser[]
  MediaImage MediaImage[]

  categories String[]

  learningSession LearningSession[]

  createdAt DateTime  @default(now()) @map(name: "created_at")
  updatedAt DateTime  @updatedAt @map(name: "updated_at")
  deletedAt DateTime? @map(name: "deleted_at")

  @@unique([mediaId, languageId])
}

model MediaImage {
  id   String @id @default(cuid())
  type String

  mediaLanguageId String         @map(name: "media_language_id")
  mediaLanguage   MediaLanguages @relation(fields: [mediaLanguageId], references: [id])

  url       String
  createdAt DateTime  @default(now()) @map(name: "created_at")
  updatedAt DateTime  @updatedAt @map(name: "updated_at")
  deletedAt DateTime? @map(name: "deleted_at")
}

model MediaWords {
  id String @id @default(cuid())

  wordId    String @map(name: "word_id")
  word      Word   @relation(fields: [wordId], references: [id])
  frequency Int?   @default(0)

  mediaLanguageId String         @map(name: "media_language_id")
  mediaLanguage   MediaLanguages @relation(fields: [mediaLanguageId], references: [id])

  createdAt DateTime  @default(now()) @map(name: "created_at")
  updatedAt DateTime  @updatedAt @map(name: "updated_at")
  deletedAt DateTime? @map(name: "deleted_at")

  @@unique([wordId, mediaLanguageId])
}

model MediaUser {
  id String @id @default(cuid())

  userId       String @map(name: "user_id")
  user         User   @relation(fields: [userId], references: [id])
  progress     Int?   @default(0)
  wordsLearned Int?   @default(0) @map(name: "words_learned")

  mediaLanguage   MediaLanguages @relation(fields: [mediaLanguageId], references: [id])
  mediaLanguageId String         @map(name: "media_language_id")

  createdAt DateTime  @default(now()) @map(name: "created_at")
  updatedAt DateTime  @updatedAt @map(name: "updated_at")
  deletedAt DateTime? @map(name: "deleted_at")

  @@unique([userId, mediaLanguageId])
}

model Language {
  id       Int    @id @default(autoincrement())
  code     String
  language String

  translation    Translation[]
  words          Word[]
  userLanguage   UserLanguage[]
  mediaLanguages MediaLanguages[]
  user           User[]
  wordGameQuiz   WordGameQuiz[]
  subtitle       Subtitle[]

  createdAt DateTime  @default(now()) @map(name: "created_at")
  updatedAt DateTime  @updatedAt @map(name: "updated_at")
  deletedAt DateTime? @map(name: "deleted_at")

  BookLanguage BookLanguage[]
  Games        Games[]

  @@unique([code])
}

model Book {
  id           String         @id @default(cuid())
  authors      Author[]
  translators  Translator[]
  subjects     String[]
  bookshelves  String[]
  copyright    Boolean
  mediaType    MediaType
  formats      Json
  BookLanguage BookLanguage[]
}

model BookLanguage {
  id     String @id @default(cuid())
  bookId String

  languageId Int
  language   Language   @relation(fields: [languageId], references: [id])
  BookWord   BookWord[]

  book        Book    @relation(fields: [bookId], references: [id])
  title       String
  description String?

  learningSession LearningSession[]

  createdAt DateTime    @default(now()) @map(name: "created_at")
  updatedAt DateTime    @updatedAt @map(name: "updated_at")
  deletedAt DateTime?   @map(name: "deleted_at")
  BookImage BookImage[]

  @@unique([bookId, languageId])
}

model BookImage {
  id String @id @default(cuid())

  type String
  url  String

  bookLanguageId String       @map(name: "book_language_id")
  bookLanguage   BookLanguage @relation(fields: [bookLanguageId], references: [id])

  createdAt DateTime  @default(now()) @map(name: "created_at")
  updatedAt DateTime  @updatedAt @map(name: "updated_at")
  deletedAt DateTime? @map(name: "deleted_at")
}

model BookWord {
  id     String @id @default(cuid())
  bookId String
  wordId String

  word     Word         @relation(fields: [wordId], references: [id])
  language BookLanguage @relation(fields: [bookId], references: [id])

  createdAt DateTime  @default(now()) @map(name: "created_at")
  updatedAt DateTime  @updatedAt @map(name: "updated_at")
  deletedAt DateTime? @map(name: "deleted_at")
}

model Author {
  id        String    @id @default(cuid())
  name      String
  birth     DateTime
  death     DateTime
  mediaType MediaType
  books     Book[]
}

model Translator {
  id        String    @id @default(cuid())
  name      String
  birth     DateTime
  death     DateTime
  mediaType MediaType
  books     Book[]
}

model WordGameQuiz {
  id         String   @id @default(cuid())
  wordId     String   @map(name: "word_id")
  word       Word     @relation(fields: [wordId], references: [id])
  languageId Int      @map(name: "language_id")
  language   Language @relation(fields: [languageId], references: [id])

  type    QuizType?
  phrase  String    @db.VarChar(512)
  options String[]  @db.VarChar(512)
  answer  String    @db.VarChar(512)

  reports   Int?      @default(0)
  createdAt DateTime? @default(now()) @map(name: "created_at")
  updatedAt DateTime? @updatedAt @map(name: "updated_at")
  deletedAt DateTime? @map(name: "deleted_at")
}

model Games {
  id String @id @default(cuid())

  wordId String @map(name: "word_id")
  word   Word   @relation(fields: [wordId], references: [id])

  languageId Int      @map(name: "language_id")
  language   Language @relation(fields: [languageId], references: [id])

  type GameType?
  data Json

  createdAt DateTime? @default(now()) @map(name: "created_at")
  updatedAt DateTime? @updatedAt @map(name: "updated_at")
  deletedAt DateTime? @map(name: "deleted_at")
}

model LearningSession {
  id           String    @id @default(cuid())
  userId       String    @map(name: "user_id")
  user         User      @relation(fields: [userId], references: [id])
  startTime    DateTime  @map(name: "start_time")
  endTime      DateTime? @map(name: "end_time")
  duration     Int? // Duration in seconds
  wordsSeen    Int?      @default(0) @map(name: "words_seen")
  wordsLearned Int?      @default(0) @map(name: "words_learned")

  // What was studied
  mediaLanguageId String?         @map(name: "media_language_id")
  mediaLanguage   MediaLanguages? @relation(fields: [mediaLanguageId], references: [id])

  bookLanguageId String?       @map(name: "book_language_id")
  bookLanguage   BookLanguage? @relation(fields: [bookLanguageId], references: [id])

  gameSessionId String?      @map(name: "game_session_id")
  gameSession   GameSession? @relation(fields: [gameSessionId], references: [id])

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")
}

model Achievement {
  id          String @id @default(cuid())
  name        String
  description String
  type        String // Streak, Words, Level, Media, etc.
  requirement Int // Number required to earn
  icon        String // URL to icon image

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  userAchievements UserAchievement[]
}

model UserAchievement {
  id            String      @id @default(cuid())
  userId        String      @map(name: "user_id")
  user          User        @relation(fields: [userId], references: [id])
  achievementId String      @map(name: "achievement_id")
  achievement   Achievement @relation(fields: [achievementId], references: [id])
  earnedAt      DateTime    @default(now()) @map(name: "earned_at")

  @@unique([userId, achievementId])
}

model Friendship {
  id        String   @id @default(cuid())
  userId    String   @map(name: "user_id")
  user      User     @relation("UserFriends", fields: [userId], references: [id])
  friendId  String   @map(name: "friend_id")
  friend    User     @relation("FriendOf", fields: [friendId], references: [id])
  status    String   @default("PENDING") // PENDING, ACCEPTED, DECLINED
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  @@unique([userId, friendId])
}

model UserNote {
  id        String   @id @default(cuid())
  userId    String   @map(name: "user_id")
  user      User     @relation(fields: [userId], references: [id])
  content   String   @db.Text
  type      String // GENERAL, WORD, MEDIA, BOOK
  refId     String?  @map(name: "ref_id") // ID of the referenced item (word, media, etc.)
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")
}

model GameSession {
  id        String   @id @default(cuid())
  gameType  GameType
  score     Int      @default(0)
  completed Boolean  @default(false)
  duration  Int? // Duration in seconds

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  learningSession LearningSession[]
  gameRounds      GameRound[]
}

model GameRound {
  id            String      @id @default(cuid())
  gameSessionId String      @map(name: "game_session_id")
  gameSession   GameSession @relation(fields: [gameSessionId], references: [id])
  roundNumber   Int         @map(name: "round_number")
  wordId        String?     @map(name: "word_id")
  word          Word?       @relation(fields: [wordId], references: [id])
  correct       Boolean     @default(false)
  timeTaken     Int?        @map(name: "time_taken") // Milliseconds to answer

  createdAt DateTime @default(now()) @map(name: "created_at")
}

model OTP {
  id        String    @id @default(cuid())
  userId    String    @map(name: "user_id")
  user      User      @relation(fields: [userId], references: [id])
  code      String
  type      String
  usedAt    DateTime? @map(name: "used_at")
  expiresAt DateTime  @map(name: "expires_at")
  createdAt DateTime  @default(now()) @map(name: "created_at")
  updatedAt DateTime  @updatedAt @map(name: "updated_at")
}

model MarketingBenchmark {
  id                      String   @id @default(cuid())
  name                    String   @unique
  users                   Int?     @default(0)
  revenue                 Int?     @default(0)
  registered              Int?     @default(0)
  active                  Int?     @default(0)
  login                   Int?     @default(0)
  mobile                  Int?     @default(0)
  desktop                 Int?     @default(0)
  tablet                  Int?     @default(0)
  // Improved metrics
  dailyActiveUsers        Int?     @default(0) @map(name: "daily_active_users")
  monthlyActiveUsers      Int?     @default(0) @map(name: "monthly_active_users")
  retentionRate           Float?   @default(0) @map(name: "retention_rate")
  churnRate               Float?   @default(0) @map(name: "churn_rate")
  customerAcquisitionCost Float?   @default(0) @map(name: "customer_acquisition_cost")
  lifetimeValue           Float?   @default(0) @map(name: "lifetime_value")
  conversionRate          Float?   @default(0) @map(name: "conversion_rate")
  avgSessionDuration      Int?     @default(0) @map(name: "avg_session_duration")
  organicTraffic          Int?     @default(0) @map(name: "organic_traffic")
  paidTraffic             Int?     @default(0) @map(name: "paid_traffic")
  socialTraffic           Int?     @default(0) @map(name: "social_traffic")
  referralTraffic         Int?     @default(0) @map(name: "referral_traffic")
  timestamp               DateTime @default(now())
  createdAt               DateTime @default(now()) @map(name: "created_at")
  updatedAt               DateTime @updatedAt @map(name: "updated_at")
}

model MarketingCampaign {
  id          String    @id @default(cuid())
  name        String
  description String?
  type        String // EMAIL, SOCIAL, PPC, CONTENT, REFERRAL, etc.
  channel     String // FACEBOOK, INSTAGRAM, GOOGLE, EMAIL, etc.
  budget      Float?
  startDate   DateTime  @map(name: "start_date")
  endDate     DateTime? @map(name: "end_date")
  status      String // DRAFT, ACTIVE, PAUSED, COMPLETED

  // KPIs
  impressions Int?   @default(0)
  clicks      Int?   @default(0)
  leads       Int?   @default(0)
  conversions Int?   @default(0)
  revenue     Float? @default(0)
  roi         Float? @default(0)

  // UTM parameters
  utmSource   String? @map(name: "utm_source")
  utmMedium   String? @map(name: "utm_medium")
  utmCampaign String? @map(name: "utm_campaign")
  utmContent  String? @map(name: "utm_content")
  utmTerm     String? @map(name: "utm_term")

  // Relations
  userAcquisitions UserAcquisition[]
  abTests          ABTest[]
  emailCampaigns   EmailCampaign[]
  marketingContent MarketingContent[]

  createdAt DateTime  @default(now()) @map(name: "created_at")
  updatedAt DateTime  @updatedAt @map(name: "updated_at")
  deletedAt DateTime? @map(name: "deleted_at")
}

model UserAcquisition {
  id           String  @id @default(cuid())
  userId       String  @map(name: "user_id")
  user         User    @relation(fields: [userId], references: [id])
  source       String // ORGANIC, PAID, REFERRAL, SOCIAL, etc.
  medium       String? // CPC, EMAIL, SOCIAL, etc.
  campaign     String?
  landingPage  String? @map(name: "landing_page")
  referralCode String? @map(name: "referral_code")

  // UTM tracking
  utmSource   String? @map(name: "utm_source")
  utmMedium   String? @map(name: "utm_medium")
  utmCampaign String? @map(name: "utm_campaign")
  utmContent  String? @map(name: "utm_content")
  utmTerm     String? @map(name: "utm_term")

  // Device & location info
  device          String? // MOBILE, DESKTOP, TABLET
  browser         String?
  operatingSystem String? @map(name: "operating_system")
  country         String?
  region          String?
  city            String?

  // Attribution data
  firstTouchPoint String? @map(name: "first_touch_point")
  lastTouchPoint  String? @map(name: "last_touch_point")
  touchPointsJson Json?   @map(name: "touch_points_json")

  // Campaign relation
  marketingCampaignId String?            @map(name: "marketing_campaign_id")
  marketingCampaign   MarketingCampaign? @relation(fields: [marketingCampaignId], references: [id])

  // Conversion data
  convertedToTrial Boolean   @default(false) @map(name: "converted_to_trial")
  convertedToPaid  Boolean   @default(false) @map(name: "converted_to_paid")
  trialStartDate   DateTime? @map(name: "trial_start_date")
  conversionDate   DateTime? @map(name: "conversion_date")

  // Customer value metrics
  acquisitionCost Float? @map(name: "acquisition_cost")
  lifetimeValue   Float? @map(name: "lifetime_value")

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")
}

model Referral {
  id         String  @id @default(cuid())
  referrerId String  @map(name: "referrer_id")
  referrer   User    @relation("UserReferrals", fields: [referrerId], references: [id])
  refereeId  String? @map(name: "referee_id")
  referee    User?   @relation("UserReferees", fields: [refereeId], references: [id])
  code       String  @unique
  type       String // INVITE, SOCIAL_SHARE, AFFILIATE
  status     String // PENDING, COMPLETED, EXPIRED, REWARDED

  // Rewards
  referrerReward       String?   @map(name: "referrer_reward") // Description of reward
  referrerRewardAmount Float?    @map(name: "referrer_reward_amount")
  refereeReward        String?   @map(name: "referee_reward") // Description of reward
  refereeRewardAmount  Float?    @map(name: "referee_reward_amount")
  rewardClaimed        Boolean   @default(false) @map(name: "reward_claimed")
  rewardClaimedAt      DateTime? @map(name: "reward_claimed_at")

  // Social sharing data
  sharedPlatform String? @map(name: "shared_platform") // FACEBOOK, TWITTER, EMAIL, etc.
  sharedUrl      String? @map(name: "shared_url")
  clicks         Int     @default(0)

  expiresAt DateTime? @map(name: "expires_at")
  createdAt DateTime  @default(now()) @map(name: "created_at")
  updatedAt DateTime  @updatedAt @map(name: "updated_at")
}

model MarketingContent {
  id          String  @id @default(cuid())
  title       String
  description String?
  contentType String  @map(name: "content_type") // EMAIL, BLOG, SOCIAL, BANNER, etc.
  format      String // HTML, TEXT, IMAGE, VIDEO, etc.
  content     String? @db.Text // Can be HTML, text, or URL to content
  imageUrl    String? @map(name: "image_url")
  videoUrl    String? @map(name: "video_url")
  targetUrl   String? @map(name: "target_url") // Landing page

  // Campaign association
  campaignId String?            @map(name: "campaign_id")
  campaign   MarketingCampaign? @relation(fields: [campaignId], references: [id])

  // Performance metrics
  impressions Int? @default(0)
  clicks      Int? @default(0)
  conversions Int? @default(0)

  // Content scheduling
  publishAt   DateTime? @map(name: "publish_at")
  unpublishAt DateTime? @map(name: "unpublish_at")
  status      String    @default("DRAFT") // DRAFT, PUBLISHED, ARCHIVED

  // Content tagging
  tags          String[]
  marketingTags MarketingTag[]

  // Email campaigns using this content
  emailCampaigns EmailCampaign[]

  createdAt DateTime  @default(now()) @map(name: "created_at")
  updatedAt DateTime  @updatedAt @map(name: "updated_at")
  deletedAt DateTime? @map(name: "deleted_at")
}

model ABTest {
  id          String  @id @default(cuid())
  name        String
  description String?
  testType    String  @map(name: "test_type") // LANDING_PAGE, EMAIL, FEATURE, PRICING, etc.
  status      String // DRAFT, RUNNING, PAUSED, COMPLETED

  // Test parameters
  hypothesis String?
  goalMetric String  @map(name: "goal_metric") // CONVERSION, RETENTION, ENGAGEMENT, etc.

  // Variant definitions
  controlVariant       String   @map(name: "control_variant")
  experimentalVariants String[] @map(name: "experimental_variants")

  // Test schedule
  startDate DateTime  @map(name: "start_date")
  endDate   DateTime? @map(name: "end_date")

  // Results
  sampleSize         Int?    @default(0) @map(name: "sample_size")
  controlSize        Int?    @default(0) @map(name: "control_size")
  controlConversions Int?    @default(0) @map(name: "control_conversions")
  resultsJson        Json?   @map(name: "results_json") // Detailed results
  winner             String? // Which variant won
  confidenceLevel    Float?  @map(name: "confidence_level")

  // Campaign association
  campaignId String?            @map(name: "campaign_id")
  campaign   MarketingCampaign? @relation(fields: [campaignId], references: [id])

  createdAt DateTime  @default(now()) @map(name: "created_at")
  updatedAt DateTime  @updatedAt @map(name: "updated_at")
  deletedAt DateTime? @map(name: "deleted_at")
}

model UserSegment {
  id          String  @id @default(cuid())
  name        String
  description String?

  // Segment criteria (JSON format for flexible querying)
  criteria Json // e.g., {"age": {"gt": 25}, "country": ["US", "CA"], "subscription": "premium"}

  // Segment statistics
  userCount Int? @default(0) @map(name: "user_count")

  // Segment usage
  isActive Boolean @default(true) @map(name: "is_active")

  // Relations
  emailCampaigns EmailCampaign[]

  createdAt DateTime  @default(now()) @map(name: "created_at")
  updatedAt DateTime  @updatedAt @map(name: "updated_at")
  deletedAt DateTime? @map(name: "deleted_at")
}

model EmailCampaign {
  id           String  @id @default(cuid())
  name         String
  description  String?
  subject      String
  preheader    String?
  fromName     String  @map(name: "from_name")
  fromEmail    String  @map(name: "from_email")
  replyToEmail String? @map(name: "reply_to_email")

  // Email content
  contentId String?           @map(name: "content_id")
  content   MarketingContent? @relation(fields: [contentId], references: [id])

  // Campaign parameters
  segmentId String?      @map(name: "segment_id")
  segment   UserSegment? @relation(fields: [segmentId], references: [id])

  // Schedule
  scheduledAt DateTime? @map(name: "scheduled_at")
  sentAt      DateTime? @map(name: "sent_at")

  // Status
  status String // DRAFT, SCHEDULED, SENDING, SENT, CANCELLED

  // Performance metrics
  recipients   Int? @default(0)
  opens        Int? @default(0)
  uniqueOpens  Int? @default(0) @map(name: "unique_opens")
  clicks       Int? @default(0)
  uniqueClicks Int? @default(0) @map(name: "unique_clicks")
  bounces      Int? @default(0)
  complaints   Int? @default(0)
  unsubscribes Int? @default(0)

  // Calculated metrics
  openRate        Float? @map(name: "open_rate")
  clickRate       Float? @map(name: "click_rate")
  clickToOpenRate Float? @map(name: "click_to_open_rate")
  bounceRate      Float? @map(name: "bounce_rate")

  // Campaign association
  campaignId String?            @map(name: "campaign_id")
  campaign   MarketingCampaign? @relation(fields: [campaignId], references: [id])

  createdAt DateTime  @default(now()) @map(name: "created_at")
  updatedAt DateTime  @updatedAt @map(name: "updated_at")
  deletedAt DateTime? @map(name: "deleted_at")
}

model UserFeedback {
  id     String @id @default(cuid())
  userId String @map(name: "user_id")
  user   User   @relation(fields: [userId], references: [id])

  // Feedback type
  type String // NPS, SURVEY, REVIEW, TESTIMONIAL, etc.

  // NPS data
  npsScore   Int?    @map(name: "nps_score") // 0-10
  npsComment String? @map(name: "nps_comment")

  // Survey data  
  surveyId      String? @map(name: "survey_id")
  responsesJson Json?   @map(name: "responses_json") // Flexible storage for survey responses

  // General feedback
  title   String?
  content String?
  rating  Int? // 1-5 stars

  // Source of feedback
  source String // POPUP, EMAIL, IN_APP, etc.

  // Feature-specific feedback
  feature String?

  // Status
  status String // NEW, REVIEWED, RESPONDED, CLOSED

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")
}

model MarketingTag {
  id          String  @id @default(cuid())
  name        String  @unique
  description String?
  color       String?

  // Usage stats
  usageCount Int @default(0) @map(name: "usage_count")

  // Content with this tag
  marketingContent MarketingContent[]

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")
}

enum Role {
  USER
  BKO
  ADMIN
}

enum MediaType {
  MOVIE
  VIDEO
  AUDIO
  SERIE
  DOCUMENTARY
  SHORT
  BOOK
  PODCAST
  MUSIC
  Dataset
  TEXT
}

enum QuizType {
  TRANSLATION
  MEANING
  EXAMPLE
  SYNONYMS
  ANTONYMS
  DEFINITION
  PRONUNCIATION
  WORD
  PHRASE
  IDIOM
}

enum GameType {
  TRANSLATION
  MEANING
  EXAMPLE
  SYNONYMS
  ANTONYMS
  DEFINITION
  PRONUNCIATION
  WORD
  PHRASE
  IDIOM
}
